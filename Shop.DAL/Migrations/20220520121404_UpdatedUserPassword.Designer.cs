// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shop.DAL.Context;

#nullable disable

namespace Shop.DAL.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20220520121404_UpdatedUserPassword")]
    partial class UpdatedUserPassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shop.DAL.Entities.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoreCount")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("TDP")
                        .HasColumnType("integer");

                    b.Property<int>("WareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WareId");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            Id = 3,
                            GenderName = "Unknown"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("TDP")
                        .HasColumnType("integer");

                    b.Property<int>("VRAMSize")
                        .HasColumnType("integer");

                    b.Property<int>("WareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WareId");

                    b.ToTable("GPUs");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderMembers");
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderStatusName = "In Progress"
                        },
                        new
                        {
                            Id = 2,
                            OrderStatusName = "Finished"
                        },
                        new
                        {
                            Id = 3,
                            OrderStatusName = "Canceled"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderWare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("WareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WareId");

                    b.ToTable("OrderWares");
                });

            modelBuilder.Entity("Shop.DAL.Entities.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("WareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WareId");

                    b.ToTable("RAM");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Client"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Shop.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@mail.ua",
                            GenderId = 3,
                            Name = "Admin",
                            PasswordHash = new byte[] { 54, 176, 198, 137, 43, 238, 175, 10, 216, 224, 158, 72, 57, 1, 53, 158, 10, 191, 19, 250, 173, 27, 180, 107, 193, 254, 129, 245, 5, 202, 169, 188, 151, 227, 183, 239, 151, 249, 68, 244, 187, 115, 69, 37, 77, 28, 81, 142, 122, 135, 167, 158, 139, 66, 219, 148, 83, 246, 252, 167, 98, 55, 245, 211 },
                            PasswordSalt = new byte[] { 224, 50, 49, 61, 30, 28, 86, 111, 199, 182, 236, 85, 48, 36, 55, 179, 224, 134, 167, 115, 215, 40, 197, 9, 169, 255, 61, 181, 162, 165, 61, 197, 118, 26, 216, 204, 238, 25, 182, 188, 240, 190, 225, 34, 82, 104, 46, 115, 78, 80, 78, 160, 243, 191, 186, 235, 33, 17, 136, 76, 5, 113, 86, 58, 40, 39, 173, 218, 182, 109, 180, 86, 45, 14, 55, 134, 61, 54, 11, 164, 192, 179, 138, 222, 56, 165, 131, 191, 37, 149, 71, 46, 65, 248, 207, 117, 198, 1, 142, 94, 83, 246, 108, 236, 252, 52, 88, 193, 77, 236, 101, 12, 94, 217, 14, 202, 181, 19, 237, 128, 175, 200, 173, 234, 60, 149, 166, 71 },
                            Phone = "0951234567",
                            RoleId = 1,
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.Ware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Manufactured")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("WareStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WareStatusId");

                    b.ToTable("Ware");
                });

            modelBuilder.Entity("Shop.DAL.Entities.WareStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WareStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "In store"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "In stock"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Not avaible"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.WareType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WareTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "CPU"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "GPU"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "RAM"
                        });
                });

            modelBuilder.Entity("Shop.DAL.Entities.CPU", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Ware", "Ware")
                        .WithMany("CPUs")
                        .HasForeignKey("WareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("Shop.DAL.Entities.GPU", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Ware", "Ware")
                        .WithMany("GPUs")
                        .HasForeignKey("WareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Order", b =>
                {
                    b.HasOne("Shop.DAL.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderMember", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Order", "Order")
                        .WithMany("OrderMembers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.DAL.Entities.User", "User")
                        .WithMany("OrderMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderWare", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Order", "Order")
                        .WithMany("OrderWares")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.DAL.Entities.Ware", "Ware")
                        .WithMany("OrderWares")
                        .HasForeignKey("WareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("Shop.DAL.Entities.RAM", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Ware", "Ware")
                        .WithMany("RAM")
                        .HasForeignKey("WareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ware");
                });

            modelBuilder.Entity("Shop.DAL.Entities.User", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Ware", b =>
                {
                    b.HasOne("Shop.DAL.Entities.Supplier", "Supplier")
                        .WithMany("Wares")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.DAL.Entities.WareType", "WareType")
                        .WithMany("Wares")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.DAL.Entities.WareStatus", "WareStatus")
                        .WithMany("Wares")
                        .HasForeignKey("WareStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("WareStatus");

                    b.Navigation("WareType");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderMembers");

                    b.Navigation("OrderWares");
                });

            modelBuilder.Entity("Shop.DAL.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Supplier", b =>
                {
                    b.Navigation("Wares");
                });

            modelBuilder.Entity("Shop.DAL.Entities.User", b =>
                {
                    b.Navigation("OrderMembers");
                });

            modelBuilder.Entity("Shop.DAL.Entities.Ware", b =>
                {
                    b.Navigation("CPUs");

                    b.Navigation("GPUs");

                    b.Navigation("OrderWares");

                    b.Navigation("RAM");
                });

            modelBuilder.Entity("Shop.DAL.Entities.WareStatus", b =>
                {
                    b.Navigation("Wares");
                });

            modelBuilder.Entity("Shop.DAL.Entities.WareType", b =>
                {
                    b.Navigation("Wares");
                });
#pragma warning restore 612, 618
        }
    }
}
